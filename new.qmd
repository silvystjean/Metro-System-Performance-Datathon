---
title: "plan"
format: pdf
editor: visual
---

## Cleaning done in Excel

## EDA

```{r}

library(tidyverse)

metro.2 <- read.csv("clean_data.csv")

glimpse(metro.2)
```

## Ridership trend

```{r}
ridership_years <- metro.2 |> group_by(Annum) |> summarize(Total_ridership = sum(Annual_Ridership_.Millions.))


# Load necessary libraries
library(plotly)



# Create the trend plot using plotly

ridership.trend <- plot_ly(ridership_years, x = ~Annum, y = ~Total_ridership, type = 'scatter', mode = 'lines+markers', name = 'Trend',
               line = list(color = 'red')) %>%
  add_bars(name = 'Total Ridership', marker = list(color = "cyan")) %>%
  layout(title = "Trend of Total Ridership over Years",
         xaxis = list(title = "Year"),
         yaxis = list(title = "Total Ridership (millions)", tickformat = ".0f"),
        plot_bgcolor = 'lightgrey')

# Display the plot
ridership.trend
```

```{r}
ridership_years.2 <- metro.2 %>%
  group_by(Country.region, Annum) %>%
  summarize(Total_ridership = sum(Annual_Ridership_.Millions.,na.rm = TRUE),
            .groups = 'drop')



# Find the top 10 countries by total ridership
top_countries <- ridership_years.2 %>%
  group_by(Country.region) %>%
  summarize(Total_ridership = sum(Total_ridership), .groups = 'drop') %>%
  arrange(desc(Total_ridership)) %>%
  slice_head(n = 10) %>%
  pull(Country.region)


# Filter the original summarized data to include only the top 10 countries
ridership_years.2 <- ridership_years.2 %>%
  filter(Country.region %in% top_countries)

print(ridership_years.2)
```

```{r}
ridership_years.2 <- ridership_years.2 %>%
  filter(Country.region %in% top_countries)

# Plot the ridership trend for the top 10 countries

fig <- plot_ly(data = ridership_years.2, x =  ~Total_ridership, y = ~Country.region, type = 'bar', 
               color = ~as.factor(Annum),  text = ~sprintf("%.2f", Total_ridership), hoverinfo = 'text') %>%
  layout(title = "Yearly Ridership Trends for Top 10 Countries",
         xaxis = list(title = "Ridership"),
         yaxis = list(title = "Country"),
         barmode = 'stack',
         legend = list(title = list(text = 'Country'), orientation = 'v', x = 1, y = 1))

fig
```

## Distribution of metro lengths: Visualize the total miles of metro systems globally.

```{r}
Length_distribution <- plot_ly(data = metro.2, x = ~System_Length_ml, type = 'histogram', 
                               marker = list(color = 'cyan', line = list(color = 'black', width = 1)))

# Add density line
density_data <- density(metro.2$System_Length_ml)
Length_distribution <- Length_distribution %>%
  add_lines(x = density_data$x, y = density_data$y * length(metro.2$System_Length_ml) * diff(density_data$x[1:2]), 
            line = list(color = 'red', width = 2), name = 'High Density')

Length_distribution

```

```{r}
# Length vs. ridership correlation
cor(metro.2$System_Length_ml, metro.2$Annual_Ridership_.Millions., use = "complete.obs")
```

```{r}
Length.ridership <- plot_ly(data = metro.2, x = ~System_Length_ml, y = ~Annual_Ridership_.Millions., type = 'scatter', mode = 'markers', 
        marker = list(size = 10, color = "cyan", line = list(color = "black", width = 1))) %>%
  layout(title = list(text = "Metro System Size vs. Annual Ridership", x = 0.5),
         xaxis = list(title = "System Length (Miles)"),
         yaxis = list(title = "Annual Ridership (Millions)"))
Length.ridership
```

### % of countries with metro systems

```{r}
all_countries <- 195
metro_countries <- metro.2 %>% filter(!is.na(Annual_Ridership_.Millions.)) %>% distinct(Country.region) %>% nrow()
percentage_metro <- (metro_countries / all_countries) * 100
percentage_metro
```

## Developed vs. developing countries: Compare metro system prevalence by development status.

```{r}
dev_data <- read.csv("development.csv")
head(dev_data)
```

```{r}
metro.2 <- metro.2 |> left_join(dev_data, by = "Country.region")
View(metro.2)
```

```{r}
metro <- metro.2 |> filter(!is.na(Annual_Ridership_.Millions.))
# We have 16 NA values by Ridership: 1 Developed, 15 Developing

```

```{r}
# Key comparison between Metro Prevelance:
# Presense on metro system: Are metros more common in developed countries?
# Network size and coverage
# Accessibility
prevelance_metro <- metro |> group_by(Development.Status) |> 
  summarize(prevelance_metro = (n()/189)* 100) # Prevelance by presence of metro
print(prevelance_metro)


```

```{r}
prevalence_metro <- data.frame(
  Development.Status = prevelance_metro$Development.Status,
  prevalence_metro = prevelance_metro$prevelance_metro  # Example values
)

# Create pie chart
fig <- plot_ly(prevalence_metro, labels = ~Development.Status, values = ~prevalence_metro, type = 'pie') %>%
  layout(title = 'Prevalence of Metro Systems by Development Status',
         xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
         yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))

# Show the plot
fig
```

```{r}
# Newtork size and coverage
length_metro <- metro |> group_by(Development.Status) |> 
  summarize(length_metro_median = median(System_Length_ml), length_metro_sum = sum(System_Length_ml)) # Prevelance by presence of metro
print(length_metro)
```

```{r}
# Accessibility
Ridership_metro <- metro |> group_by(Development.Status) |> 
  summarize(Ridership_metro_median = median(Annual_Ridership_.Millions.), Ridership_metro_sum = sum(Annual_Ridership_.Millions.)) # Prevelance by presence of metro
print(Ridership_metro)
```

### Track how metro systems have grown ovetime

```{r}

# Calculate cumulative count of metro systems by year
library(dplyr)
metro_growth <- metro %>%
  group_by(Service.opened) %>%
  summarize(Cumulative_Count = n()) %>%
  mutate(Cumulative_Count = cumsum(Cumulative_Count))

# Plot growth over time
library(plotly)
fig <- plot_ly(metro_growth, x = ~Service.opened, y = ~Cumulative_Count, type = 'scatter', mode = 'lines+markers') %>%
  layout(title = 'Growth of Metro Systems Over Time',
         xaxis = list(title = 'Year'),
         yaxis = list(title = 'Cumulative Count of Metro Systems'))

# Show the plot
fig

```

```{r}

# Calculate cumulative count of metro systems by year and development status
library(dplyr)
metro_growth <- metro %>%
  group_by(Service.opened, Development.Status) %>%
  summarize(Cumulative_Count = n(), .groups = 'drop') %>%
  group_by(Development.Status) %>%
  mutate(Cumulative_Count = cumsum(Cumulative_Count))

# Plot growth over time by development status
library(plotly)
fig <- plot_ly(metro_growth, x = ~Service.opened, y = ~Cumulative_Count, color = ~Development.Status, type = 'scatter', mode = 'lines+markers') %>%
  layout(title = 'Growth of Metro Systems Over Time by Development Status',
         xaxis = list(title = 'Year'),
         yaxis = list(title = 'Cumulative Count of Metro Systems'))

# Show the plot
fig

```

```{r}
# Install plotly if you haven't already
library(plotly)

# Sort data by ridership
top_10_metro_data <- metro %>% arrange(desc(Annual_Ridership_.Millions.)) %>% head(10)
# Create bar chart
fig <- plot_ly(top_10_metro_data, x = ~Name, y = ~Annual_Ridership_.Millions., type = 'bar', 
               text = ~paste('Ridership:', Annual_Ridership_.Millions., 'Milllon'), 
               hoverinfo = 'text', 
               marker = list(color = 'rgba(55, 83, 109, 0.7)', line = list(color = 'rgba(55, 83, 109, 1.0)', width = 2))) %>%
  layout(title = 'Top 10 Metro Systems by Ridership',
         xaxis = list(title = 'Metro System'),
         yaxis = list(title = 'Ridership (Billions)'),
         margin = list(l = 50, r = 50, b = 100, t = 100, pad = 4),
         paper_bgcolor = 'rgba(245, 246, 249, 1)',
         plot_bgcolor = 'rgba(245, 246, 249, 1)')

# Show the plot
fig

```

```{r}
ridership_years <- metro %>%
  group_by(Name, Annum) %>%
  summarize(Total_ridership = sum(Annual_Ridership_.Millions.,na.rm = TRUE),
            .groups = 'drop')



# Find the top 10 countries by total ridership
top_metro <- ridership_years %>%
  group_by(Name) %>%
  summarize(Total_ridership = sum(Total_ridership), .groups = 'drop') %>%
  arrange(desc(Total_ridership)) %>%
  slice_head(n = 10) %>%
  pull(Name)


# Filter the original summarized data to include only the top 10 countries
ridership_years <- ridership_years %>%
  filter(Name %in% top_metro)

print(ridership_years)


# Plot the ridership trend for the top 10 countries

fig <- plot_ly(data = ridership_years, x =  ~Total_ridership, y = ~Name, type = 'bar', 
               color = ~as.factor(Annum),  text = ~sprintf("%.2f", Total_ridership), hoverinfo = 'text') %>%
  layout(title = "Yearly Ridership Trends for Top 10 Countries",
         xaxis = list(title = "Ridership"),
         yaxis = list(title = "Country"),
         barmode = 'stack',
         legend = list(title = list(text = 'Country'), orientation = 'v', x = 1, y = 1))

fig
```

```{r}
# Load necessary libraries

library(forecast)
library(randomForest)
library(gbm)
library(dplyr)
library(tidyr)
library(plotly)

# Convert numeric year to Date format (assuming January 1st of each year)
metro$Annum <- as.Date(paste0(metro$Annum, "-01-01"))

# Calculate mean ridership by year
pred_data <- metro %>%
  group_by(Annum) %>%
  summarize(Annual_Ridership_Millions = median(Annual_Ridership_.Millions., na.rm = TRUE), .groups = 'drop')

# Convert Annum to Year as numeric
pred_data$Year <- as.numeric(format(pred_data$Annum, "%Y"))

# Split data into training and testing sets
train_data <- pred_data 
test_data <- pred_data %>% filter(Annum >= "2009-01-01")


# ARIMA Model
# Convert to time series
train_ts <- ts(train_data$Annual_Ridership_Millions, start = min(train_data$Year), end = max(train_data$Year), frequency = 1)

# Fit ARIMA model
fit_arima <- auto.arima(train_ts)

# Forecast
forecast_arima <- forecast(fit_arima, h = nrow(test_data))

# Evaluate ARIMA
mae_arima <- mean(abs(forecast_arima$mean - test_data$Annual_Ridership_Millions))
rmse_arima <- sqrt(mean((forecast_arima$mean - test_data$Annual_Ridership_Millions)^2))

# Random Forest Model
# Fit Random Forest model
fit_rf <- randomForest(Annual_Ridership_Millions ~ Year, data = train_data)

# Predict
predictions_rf <- predict(fit_rf, newdata = test_data)

# Evaluate Random Forest
mae_rf <- mean(abs(predictions_rf - test_data$Annual_Ridership_Millions))
rmse_rf <- sqrt(mean((predictions_rf - test_data$Annual_Ridership_Millions)^2))

# Gradient Boosting Model
# Fit Gradient Boosting model with adjusted parameters
fit_gbm <- gbm(Annual_Ridership_Millions ~ Year,
               data = train_data,
               distribution = "gaussian",
               n.trees = 1000,
               interaction.depth = 4,
               n.minobsinnode = 2,  # Adjusted parameter
               shrinkage = 0.07,    # Added learning rate parameter
               bag.fraction = 0.75)  # Adjusting the subsampling rate

# Predict
predictions_gbm <- predict(fit_gbm, newdata = test_data, n.trees = 1000)

# Evaluate Gradient Boosting
mae_gbm <- mean(abs(predictions_gbm - test_data$Annual_Ridership_Millions))
rmse_gbm <- sqrt(mean((predictions_gbm - test_data$Annual_Ridership_Millions)^2))

# Compare Models
# Create a summary table of evaluation metrics
results <- data.frame(
  Model = c("ARIMA", "Random Forest", "Gradient Boosting"),
  MAE = c(mae_arima, mae_rf, mae_gbm),
  RMSE = c(rmse_arima, rmse_rf, rmse_gbm)
)

print(results)

# Visualize Forecasts
# Convert forecast_arima to dataframe
forecast_df <- data.frame(
  Year = test_data$Year,
  ARIMA = as.numeric(forecast_arima$mean),
  RF = predictions_rf,
  GBM = predictions_gbm,
  Actual = test_data$Annual_Ridership_Millions
)

# Melt dataframe for plotting
forecast_melted <- forecast_df %>%
  pivot_longer(cols = c(ARIMA, RF, GBM, Actual), names_to = "Model", values_to = "Ridership")

# Plot forecasts
fig <- plot_ly(forecast_melted, x = ~Year, y = ~Ridership, color = ~Model, type = 'scatter', mode = 'lines+markers') %>%
  layout(title = 'Forecasting Future Ridership',
         xaxis = list(title = 'Year'),
         yaxis = list(title = 'Ridership', range = c(0, max(forecast_melted$Ridership) * 1.5)))

# Show the plot
fig

```

```{r}
predictions_gbm <- predict(fit_rf, newdata = data.frame(Year = c("2018", "2024-01-01", "2025-01-01", "2050-01-01")))
```
